#!/bin/sh
#
# A very simple aur downloader written in sh

# Program variables ( User should edit these )
aurdir=$HOME/.local/share/aursh

# Program variables ( User shouldn't edit these )
oldpwd=$PWD

# Styling
bold="\033[1m"
normal="\033[0m"
cyan="\033[36m"
light_red="\033[91m"
light_green="\033[92m"
light_magenta="\033[95m"

# Functions

usage(){
printf "%bUSAGE:%b %baursh%b %b[OPTION...]%b package
%bOptions:%b\n
%bhelp%b     \tbrings up this menu
%binstall%b  \tinstalls a package from the aur
%buninstall%b\tuninstalls a package from the aur
%bsearch%b   \tsearches for the aur
%bpkgsearch%b\tsearches the aur for a specific package
%bupdate%b   \tcleanbuilds a given package if not up to date,
\t\tor it will recursively update all package if none is given
%bcleanbuild%b\tcleanbuilds a package.\n" "$bold" "$normal" "$cyan" "$normal" "$bold" "$normal" "$bold" "$normal" "$light_magenta" "$normal" "$light_magenta" "$normal" "$light_magenta" "$normal" "$light_magenta" "$normal" "$light_magenta" "$normal" "$light_magenta" "$normal" "$light_magenta" "$normal"
exit 0
}

makepkg_command(){ makepkg -sricC ;}

cd_error(){ 
	printf "%b%bError:%b cd failed" "$light_red" "$bold" "$normal" && exit 1
}

packagecheck(){
	[ "$1" = "" ] && printf "%b%bError:%b no package inputted\n\n" "$light_red" "$bold" "$normal" && usage
}

install(){
	packagecheck "$1"
	if [ ! "$(curl --silent "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$1" |  jq -r -c '.results[] | .Name,.Description,.Version')" = "" ]; then
		[ ! "$(pacman -Qm "$1")" = "" ] && cd "$oldpwd" && printf "%b%bError:%b package already installed\n\n" "$light_red" "$bold" "$normal" && usage
		git clone https://aur.archlinux.org/"$1".git "$aurdir"/"$1"
		cd "$aurdir"/"$1" || cd_error
		makepkg_command
	else
		printf "%b%bError:%b package not found\n\n" "$light_red" "$bold" "$normal" && usage
	fi
}

uninstall(){
	packagecheck "$1"
	[ "$(pacman -Qm "$1")" = "" ] && cd "$oldpwd" && printf "%b%bError:%b package not installed\n\n" "$light_red" "$bold" "$normal" && usage
	cd "$aurdir" || cd_error 
	sudo rm -r "$1"
	sudo pacman -Rnus "$1"
}

update(){
	if [ ! "$1" = "" ]; then
		[ "$(find "$aurdir"/"$1")" = "" ] && cd "$oldpwd" && printf "%b%bError:%b package not installed\n\n" "$light_red" "$bold" "$normal" && usage
		cd "$aurdir"/"$1" || cd_error
		[ "$(git pull)" = "Already up to date." ] && cd "$oldpwd" && echo "${light_green}${bold}Already up to date${normal}" && exit 0 
		makepkg_command
	else
		printf "Warning: this will rebuild all of your out of date packages, are you sure you want to continue Y/n " && read -r yesno
		[ "$yesno" = "n" ] || [ "$yesno" = "N" ] || [ "$yesno" = "no" ] || [ "$yesno" = "No" ] && cd "$oldpwd" && exit 0
		for pkgdir in "$aurdir"/*; do
			cd "$pkgdir" || cd_error
			if [ ! "$(git pull)" = "Already up to date." ]; then
				makepkg_command
			else
				echo "${pkgdir#$aurdir/}: ${light_green}${bold}Up To Date${normal}" 
			fi
		done
	fi
}

cleanbuild(){
	packagecheck "$1"
	cd "$aurdir"/"$1" || cd_error
	makepkg_command
}

search(){
	packagecheck "$1"
	curl --silent "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$1" |  jq -r -c '.results[] | .Name,.Description,.Version' | paste -d'\n' /dev/null - - -
}

pkgsearch(){
	packagecheck "$1"
	curl --silent "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$1" |  jq --monochrome-output -r -c '.results[] | .Name,.Description,.Version,.Depends' | tr -d '"[]' | tr , " "
}

case $1 in
	help )
		usage
	;;
	install )
		install "$2"
	;;
	uninstall )
		uninstall "$2"
	;;
	search )
		search "$2"
	;;
	pkgsearch )
		pkgsearch "$2"
	;;
	update )
		update "$2"
	;;
	cleanbuild )
		cleanbuild "$2"
	;;
	*)
		printf "%b%bError:%b %s not an option\n\n" "$light_red" "$bold" "$normal" "$1" && usage
	;;
esac

cd "$oldpwd" || cd_error
